#!/usr/bin/expect

set timeout 500
set user [lindex $argv 0]
set pass [lindex $argv 1]
set host [lindex $argv 2]
set command [lindex $argv 3]
set path [lindex $argv 4]

if {$command == "/work/build/qt/qtdeclarative/tests/auto/qml/parserstress/tst_parserstress"} {
send_user "Setting timeout to 3600\n";
set timeout 3600
} elseif {$command == "/work/build/qt/qtdeclarative/tests/auto/qmltest/tst_qmltest"} {
send_user "Setting timeout to 3600\n"
set timeout 3600
} elseif {$command == "/work/build/qt/qtdeclarative/tests/auto/qml/qqmlcomponent/tst_qqmlcomponent"} {
send_user "Setting timeout to 3600\n"
set timeout 3600
} elseif {$command == "/work/build/qt/qtdeclarative/tests/auto/qml/qqmlecmascript/tst_qqmlecmascript"} {
send_user "Setting timeout to 3600\n"
set timeout 3600
} elseif {$command == "/work/build/qt/qtdeclarative/tests/auto/qml/qqmlsettings/tst_qqmlsettings"} {
send_user "Setting timeout to 3600\n"
set timeout 3600
} elseif {$command == "/work/build/qt/qtdeclarative/tests/auto/qml/qqmlsettings/tst_qqmlsettings"} {
send_user "Setting timeout to 3600\n"
set timeout 3600
} else {
send_user "Setting timeout to 500\n";
set timeout 500
}

spawn ssh -F . -oStrictHostKeyChecking=no $host -l $user
expect -re ".*assword:.*"
send "$pass\n"
expect "\\->"
send "putenv \"QT_QPA_EGLFS_PHYSICAL_WIDTH=155\"\r"
expect "\\->"
send "putenv \"QT_QPA_EGLFS_PHYSICAL_HEIGHT=88\"\r"
expect "\\->"
send "putenv \"QT_QPA_EGLFS_FB=/dev/fb1\"\r"
expect "\\->"
send "putenv \"LD_LIBRARY_PATH=/sd0:1/qt55rtp/lib;/sd0:1/lib\"\r"
expect "\\->"
send "cd \"$path\"\r"
expect "\\->"
send_user "Timeout set to $timeout\n->"
send "rtpSp( \"$command\", 200, 0x50000, 0, 0x01000000)\r"
expect {
    -re "(.*) Finished testing of (.*)\n" { send_user "\nAutotest Finished.\n"; exit 0;}
    "</TestCase>" { send_user "\nAutotest Finished.\n"; exit 0;}
    -re "C interp: unable to open '(.*)'." { send_user "\nMissing autotest executable. Autotest failed.\n"; exit 1; }
    -re "RTP (.*) has had a failure and has been deleted." { send_user "\nRTP has had a failure and has been deleted. Autotest failed.\n" exit 1; }
    -re "RTP (.*) has been deleted due to signal (.*)" { send_user "\nRTP has been deleted due to signal $expect_out(2,string). Autotest failed.\n"; exit 1; }
    "Unhandled C++ exception resulted in call to terminate" { send_user "\nUnhandled C++ exception. Autotest failed.\n"; exit 1; }
    "QEventDispatcherUNIXPrivate\(\): Can not continue without a thread pipe" { send_user "\nNo thread pipe. Autotest failed.\n"; exit 1; }
    "Exiting" { send_user "\nExiting. Autotest failed.\n"; exit 1; }
    "Failed to start server (can not bind server to port ${port})." { send_user "\nFailed to start server. Autotest failed.\n"; exit 1; }
    "fatal kernel task-level exception!" { send_user "\nFatal kernel task-level exception. Autotest failed.\n"; exit 1; }
    "C interp: unknown symbol name 'main'." { send_user "\nUnknown symbol name. Autotest failed.\n"; exit 1; }
    "module contains undefined symbol(s) and may be unusable." { send_user "\nUndefined symbols in binary, Autotest failed.\n"; exit 1; }
    "Undefined symbols in binary, Autotest failed." { send_user "\nUndefined symbols in binary, Autotest failed.\n"; exit 1; }
    "Cannot create Qt for Embedded Linux data directory:" { send_user "\nMissing qtembedded-0 directory, Autotest failed.\n"; exit 1; }
    "QFontDatabase: Cannot find font directory" { send_user "\nMissing fonts, Autotest failed.\n"; exit 1; }
    "C interp: unknown symbol name 'main'." { send_user "\nMissing main-function, Autotest failed.\n"; exit 1; }
    "errno = 0x2 : S_errno_ENOENT." { send_user "\nNo such file or directory, Autotest failed.\n"; exit 1; }
    "Cannot spawn a RTP with executable file" { send_user "\nCannot spawn RTP executable, Autotest failed.\n"; exit 1; }

    timeout { send_user "\nTimeout, Autotest failed.\n"; exit 1; }
}
exit 0;
